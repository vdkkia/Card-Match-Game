{"version":3,"sources":["Utils.js","components/Tile.js","components/Replay.js","components/Win.js","components/Footer.js","components/SideBar.js","Game.js","serviceWorker.js","index.js"],"names":["icons","Utils","between","max","Math","floor","random","Generate","length","tiles","Array","fill","map","x","i","value","round","id","j","randomIndex","temp","Tile","props","tile","status","onClick","type","className","style","backgroundColor","position","display","Replay","newGame","Win","Footer","won","remaining","gameOver","SideBar","boarderSize","changeSize","name","checked","textAlign","width","color","fontSize","gameType","size","time","gameTime","Game","useState","usedTiles","setUsedTiles","selectedTile","setSelectedTile","setBoarderSize","tileClick","key","includes","e","target","MyGame","setRemaining","gameId","setGameId","useEffect","timer","setTimeout","clearTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6582c19e.chunk.js","sourcesContent":["const icons = [\n  '\\u2705',\n  '\\u26FD',\n  '\\u26FA',\n  '\\u26F9',\n  '\\u26F8',\n  '\\u26F5',\n  '\\u26F4',\n  '\\u26F3',\n  '\\u26F1',\n  '\\u26F0',\n  '\\u26E9',\n  '\\u26D1',\n  '\\u26D4',\n  '\\u26C4',\n  '\\u26BE',\n  '\\u26BD',\n  '\\u26AA',\n  '\\u26AB',\n  '\\u26A1',\n  '\\u2693',\n  '\\u267F',\n  '\\u2648',\n  '\\u2649',\n  '\\u261D',\n  '\\u2615',\n  '\\u2614',\n  '\\u2757',\n  '\\u2753',\n  '\\u274E',\n  '\\u2704',\n  '\\u26EA',\n  '\\u2651',\n  '\\u2652',\n  '\\u264D',\n  '\\u264C',\n  '\\u264B',\n];\nconst Utils = {\n  between(max) {\n    return Math.floor(Math.random() * max);\n  },\n  Generate: (length) => {\n    const tiles = new Array(length)\n      .fill()\n      .map((x, i) => ({ value: Math.round((i + 1) / 2), id: i }));\n\n    for (let j = 0; j < length; j++) {\n      const randomIndex = Utils.between(length);\n      const temp = tiles[j];\n      tiles[j] = tiles[randomIndex];\n      tiles[randomIndex] = temp;\n    }\n\n    for (let j = 0; j < icons.length; j++) {\n      const randomIndex = Utils.between(icons.length);\n      const temp = icons[j];\n      icons[j] = icons[randomIndex];\n      icons[randomIndex] = temp;\n    }\n\n    return tiles;\n  },\n};\n\nexport { Utils, icons };\n","import React from 'react';\nimport { icons } from '../Utils';\n\nconst Tile = (props) => {\n  const { tile, status, onClick } = props;\n  return (\n    <button\n      type=\"button\"\n      onClick={() => onClick(tile, status)}\n      className={status}\n    >\n      <span\n        style={{\n          backgroundColor: 'transparent',\n          position: 'absolute',\n          display: status !== 'available' ? 'inline' : 'none',\n        }}\n      >\n        {icons[tile.value]}\n      </span>\n    </button>\n  );\n};\n\nexport default Tile;\n","import React from 'react';\n\nconst Replay = (props) => {\n  const { newGame } = props;\n  return (\n    <button className=\"Button\" onClick={newGame} type=\"button\">\n      Replay\n    </button>\n  );\n};\n\nexport default Replay;\n","import React from 'react';\n\nconst Win = () => <div>Hooray!</div>;\nexport default Win;\n","import React from 'react';\nimport Replay from './Replay';\nimport Win from './Win';\n\nconst Footer = (props) => {\n  const { newGame, won, remaining, gameOver } = props;\n  return (\n    <div\n      className={`Footer ${\n        remaining < 11 && remaining > 0 && !won ? 'blink' : ''\n      }`}\n    >\n      {gameOver && (\n        <>\n          Game Over!\n          <Replay newGame={newGame} />\n        </>\n      )}\n      {won && (\n        <>\n          <Win />\n          <Replay newGame={newGame} />\n        </>\n      )}\n      {!gameOver && !won && `Remaining time: ${remaining}`}\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\n\nconst SideBar = (props) => {\n  const { boarderSize, changeSize } = props;\n  return (\n    <div className=\"SideBar\">\n      <div className=\"radio\">\n        <input\n          className=\"Button\"\n          name=\"size\"\n          type=\"button\"\n          value=\"SMALL\"\n          checked={boarderSize === 'SMALL'}\n          onClick={changeSize}\n        />\n      </div>\n      <div className=\"radio\">\n        <input\n          className=\"Button\"\n          name=\"size\"\n          type=\"button\"\n          value=\"BIG\"\n          checked={boarderSize === 'BIG'}\n          onClick={changeSize}\n        />\n      </div>\n      <div className=\"Acknowledgement\">\n        <div\n          style={{\n            textAlign: 'center',\n            width: '200px',\n          }}\n        >\n          CREATED WITH\n          <span style={{ color: 'red', fontSize: '15px' }}> ‚ù§ </span>\n          FOR PARNIAN\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SideBar;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Tile from './components/Tile';\nimport Footer from './components/Footer';\nimport SideBar from './components/SideBar';\nimport { Utils } from './Utils';\n\nconst gameType = {\n  small: { size: 30, time: 99 },\n  big: { size: 70, time: 199 },\n};\nlet gameTime = gameType.small.time;\nlet tiles = Utils.Generate(30);\n\nconst Game = (props) => {\n  const [usedTiles, setUsedTiles] = useState([]);\n  const [selectedTile, setSelectedTile] = useState('');\n  const [boarderSize, setBoarderSize] = useState('SMALL');\n  const { remaining, newGame } = props;\n  const tileClick = (tile, status) => {\n    if (status === 'available' && remaining > 0) {\n      if (selectedTile.value === tile.value) {\n        setUsedTiles([...usedTiles, selectedTile, tile]);\n        setSelectedTile('');\n      } else {\n        setSelectedTile(tile);\n      }\n      // if (usedTiles.length === tiles.length) setRemaining(-1);\n    }\n  };\n\n  const tileStatus = (tile) => {\n    if (selectedTile === tile) return 'selected';\n    if (usedTiles.includes(tile)) return 'unavailable';\n    return 'available';\n  };\n  const changeSize = (e) => {\n    if (e.target.value === 'SMALL') {\n      setBoarderSize('SMALL');\n      tiles = Utils.Generate(gameType.small.size);\n      gameTime = gameType.small.time;\n    } else {\n      setBoarderSize('BIG');\n      tiles = Utils.Generate(gameType.big.size);\n      gameTime = gameType.big.time;\n    }\n    newGame();\n  };\n\n  return (\n    <div className=\"App\">\n      <div\n        className={`Boarder ${\n          tiles.length > 42 ? 'largeBoarder' : 'smallBoarder'\n        }`}\n      >\n        <div className=\"Tiles\">\n          {tiles.map((x) => (\n            <Tile\n              key={x.id}\n              tile={x}\n              onClick={tileClick}\n              status={tileStatus(x)}\n            />\n          ))}\n        </div>\n        <Footer\n          newGame={newGame}\n          gameOver={remaining === 0}\n          won={usedTiles.length === tiles.length}\n          remaining={remaining}\n        />\n      </div>\n      <SideBar\n        setBoarderSize={setBoarderSize}\n        boarderSize={boarderSize}\n        changeSize={changeSize}\n      />\n    </div>\n  );\n};\n\nconst MyGame = () => {\n  const [remaining, setRemaining] = useState(gameTime);\n  const [gameId, setGameId] = useState(1);\n  const newGame = () => {\n    setGameId(gameId + 1);\n    setRemaining(gameTime);\n  };\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (remaining > 0) {\n        setRemaining(remaining - 1);\n      }\n    }, 1000);\n    return () => {\n      clearTimeout(timer);\n    };\n  });\n  return (\n    <Game\n      key={gameId}\n      remaining={remaining}\n      setRemaining={setRemaining}\n      newGame={newGame}\n    />\n  );\n};\n\nexport default MyGame;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}